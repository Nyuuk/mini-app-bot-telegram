### User API Endpoints

# Base URL: http://localhost:3000

### 1. Get User by ID
GET {{baseUrl}}/v1/user/1
Content-Type: application/json

# Expected Response (200 OK):
# {
#   "status": 200,
#   "message": "User retrieved successfully",
#   "data": {
#     "id": 1,
#     "username": "john_doe",
#     "password_hash": "hashed_password_string",
#     "email": "john@example.com",
#     "created_at": "2024-01-01T00:00:00Z",
#     "updated_at": "2024-01-01T00:00:00Z"
#   }
# }

# Error Response (400 Bad Request):
# {
#   "status": 400,
#   "message": "ID is required",
#   "data": null
# }

# Error Response (404 Not Found):
# {
#   "status": 404,
#   "message": "User not found",
#   "data": null
# }

### 2. Create User
POST {{baseUrl}}/v1/user/
Content-Type: application/json

{
  "username": "jane_doe",
  "email": "jane@example.com",
  "password": "securepassword123"
}

# Expected Response (201 Created):
# {
#   "status": 201,
#   "message": "User created successfully",
#   "data": {
#     "id": 2,
#     "username": "jane_doe",
#     "password_hash": "hashed_password_string",
#     "email": "jane@example.com",
#     "created_at": "2024-01-01T00:00:00Z",
#     "updated_at": "2024-01-01T00:00:00Z"
#   }
# }

# Error Response (400 Bad Request) - Validation Errors:
# {
#   "status": 400,
#   "message": "Validation failed",
#   "data": [
#     {
#       "field": "username",
#       "tag": "required",
#       "message": "Username is required"
#     },
#     {
#       "field": "email",
#       "tag": "email",
#       "message": "Invalid email format"
#     },
#     {
#       "field": "password",
#       "tag": "min",
#       "message": "Password must be at least 8 characters"
#     }
#   ]
# }

# Error Response (409 Conflict) - Duplicate Username/Email:
# {
#   "status": 409,
#   "message": "Username or email already exists",
#   "data": null
# }

### 3. Create User - Invalid Data Examples

# Missing required fields
POST {{baseUrl}}/v1/user/
Content-Type: application/json

{
  "username": "",
  "email": "invalid-email",
  "password": "123"
}

# Username too short
POST {{baseUrl}}/v1/user/
Content-Type: application/json

{
  "username": "ab",
  "email": "test@example.com",
  "password": "password123"
}

# Username too long
POST {{baseUrl}}/v1/user/
Content-Type: application/json

{
  "username": "very_long_username_that_exceeds_twenty_characters",
  "email": "test@example.com",
  "password": "password123"
}

# Invalid email format
POST {{baseUrl}}/v1/user/
Content-Type: application/json

{
  "username": "testuser",
  "email": "not-an-email",
  "password": "password123"
}

# Password too short
POST {{baseUrl}}/v1/user/
Content-Type: application/json

{
  "username": "testuser",
  "email": "test@example.com",
  "password": "123"
}

### Environment Variables
@baseUrl = http://localhost:3000
