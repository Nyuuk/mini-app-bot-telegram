name: Build and Deploy

on:
  push:
    tags:
      - "v*"

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      backend-changed: ${{ steps.changes.outputs.backend }}
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "Version: ${VERSION}"
      - name: Get commit info
        id: get-commit-info
        run: |
          # Ambil informasi commit dengan handling yang lebih baik
          COMMIT_MSG=$(git log -1 --pretty=%s)
          COMMIT_AUTHOR=$(git log -1 --pretty=%an)
          COMMIT_HASH=$(echo ${{ github.sha }} | cut -c1-8)

          # Ambil changed files dengan handling yang lebih aman
          CHANGED_FILES=$(git diff --name-only HEAD^ HEAD | head -10 | tr '\n' ' ' | sed 's/[[:space:]]*$//')

          # Bersihkan dan batasi panjang commit message
          COMMIT_MSG=$(echo "$COMMIT_MSG" | head -c 100)

          # Escape karakter khusus untuk GitHub Actions
          COMMIT_MSG="${COMMIT_MSG//\'/\'}"
          COMMIT_MSG="${COMMIT_MSG//\"/\\\"}"
          COMMIT_MSG="${COMMIT_MSG//$'\n'/ }"
          COMMIT_MSG="${COMMIT_MSG//$'\r'/ }"

          COMMIT_AUTHOR="${COMMIT_AUTHOR//\'/\'}"
          COMMIT_AUTHOR="${COMMIT_AUTHOR//\"/\\\"}"

          # Set output dengan format yang aman
          {
            echo "commit_msg=$COMMIT_MSG"
            echo "commit_author=$COMMIT_AUTHOR" 
            echo "commit_hash=$COMMIT_HASH"
            echo "changed_files=$CHANGED_FILES"
          } >> $GITHUB_OUTPUT

      - name: Detect changes since last tag
        id: changes
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")

          if [ -z "$PREVIOUS_TAG" ]; then
            echo "No previous tag found, checking all files"
            BACKEND_CHANGED="true"
            FRONTEND_CHANGED="true"
          else
            echo "Comparing with previous tag: $PREVIOUS_TAG"
            
            # Check if backend files changed
            if git diff --name-only $PREVIOUS_TAG HEAD | grep -E '^backend/' > /dev/null; then
              BACKEND_CHANGED="true"
            else
              BACKEND_CHANGED="false"
            fi
            
            # Check if frontend files changed
            if git diff --name-only $PREVIOUS_TAG HEAD | grep -E '^frontend/' > /dev/null; then
              FRONTEND_CHANGED="true"
            else
              FRONTEND_CHANGED="false"
            fi
          fi

          echo "backend=${BACKEND_CHANGED}" >> $GITHUB_OUTPUT
          echo "frontend=${FRONTEND_CHANGED}" >> $GITHUB_OUTPUT
          echo "Backend changed: ${BACKEND_CHANGED}"
          echo "Frontend changed: ${FRONTEND_CHANGED}"

      - name: Send Telegram notification about changes
        run: |
          CHANGES=""
          if [[ "${{ steps.changes.outputs.backend_changed }}" == "true" ]]; then
            CHANGES="${CHANGES}‚Ä¢ Backend%0A"
          fi
          if [[ "${{ steps.changes.outputs.frontend_changed }}" == "true" ]]; then
            CHANGES="${CHANGES}‚Ä¢ Frontend%0A"
          fi

          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            TRIGGER="Manually triggered workflow"
          else
            TRIGGER="Push to \`${{ github.ref_name }}\`"
          fi

          # check if changes not found
          if [[ -z "$CHANGES" ]]; then
            CHANGES="No changes detected in backend or frontend folders."
          fi

          MESSAGE="üöÄ *MINI APP BOT System - Build Started*%0A%0A"
          MESSAGE="${MESSAGE}*Trigger:* ${TRIGGER}%0A"
          MESSAGE="${MESSAGE}*Commit:* \`${{ steps.get-commit-info.outputs.commit_hash }}\`%0A"
          MESSAGE="${MESSAGE}*Author:* ${{ steps.get-commit-info.outputs.commit_author }}%0A"
          MESSAGE="${MESSAGE}*Message:* ${{ steps.get-commit-info.outputs.commit_msg }}%0A%0A"
          # build skiping when changes not detected
          if [[ -z "$CHANGES" ]]; then
            MESSAGE="${MESSAGE}No changes detected, skipping build and deployment. ‚úÖ"
          else
            MESSAGE="${MESSAGE}*Changes detected in:*%0A${CHANGES}%0A"
            MESSAGE="${MESSAGE}Build will proceed... üîÑ"
          fi

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ vars.TELEGRAM_CHAT_ID }}" \
            -d "message_thread_id=${{ vars.TELEGRAM_TOPIC_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

  build-backend:
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Backend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,suffix=-backend
            type=raw,value=${{ needs.detect-changes.outputs.version }}-backend

      - name: Build and push Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          file: ./backend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify Backend Build Success
        if: success()
        run: |
          MESSAGE="‚úÖ *Backend Build Completed*%0A%0A"
          MESSAGE="${MESSAGE}*Version:* ${{ needs.detect-changes.outputs.version }}%0A"
          MESSAGE="${MESSAGE}*Image:* ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.detect-changes.outputs.version }}-backend%0A"
          MESSAGE="${MESSAGE}*Status:* Build and push successful%0A"
          MESSAGE="${MESSAGE}*Platforms:* linux/amd64, linux/arm64%0A%0A"
          MESSAGE="${MESSAGE}Ready for deployment! üöÄ"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ vars.TELEGRAM_CHAT_ID }}" \
            -d "message_thread_id=${{ vars.TELEGRAM_TOPIC_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

      - name: Notify Backend Build Failed
        if: failure()
        run: |
          MESSAGE="‚ùå *Backend Build Failed*%0A%0A"
          MESSAGE="${MESSAGE}*Version:* ${{ needs.detect-changes.outputs.version }}%0A"
          MESSAGE="${MESSAGE}*Status:* Build or push failed%0A%0A"
          MESSAGE="${MESSAGE}Please check the build logs for details."

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ vars.TELEGRAM_CHAT_ID }}" \
            -d "message_thread_id=${{ vars.TELEGRAM_TOPIC_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

  build-frontend:
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Frontend
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=tag,suffix=-frontend
            type=raw,value=${{ needs.detect-changes.outputs.version }}-frontend

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Notify Frontend Build Success
        if: success()
        run: |
          MESSAGE="‚úÖ *Frontend Build Completed*%0A%0A"
          MESSAGE="${MESSAGE}*Version:* ${{ needs.detect-changes.outputs.version }}%0A"
          MESSAGE="${MESSAGE}*Image:* ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.detect-changes.outputs.version }}-frontend%0A"
          MESSAGE="${MESSAGE}*Status:* Build and push successful%0A"
          MESSAGE="${MESSAGE}*Platforms:* linux/amd64, linux/arm64%0A%0A"
          MESSAGE="${MESSAGE}Ready for deployment! üöÄ"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ vars.TELEGRAM_CHAT_ID }}" \
            -d "message_thread_id=${{ vars.TELEGRAM_TOPIC_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

      - name: Notify Frontend Build Failed
        if: failure()
        run: |
          MESSAGE="‚ùå *Frontend Build Failed*%0A%0A"
          MESSAGE="${MESSAGE}*Version:* ${{ needs.detect-changes.outputs.version }}%0A"
          MESSAGE="${MESSAGE}*Status:* Build or push failed%0A%0A"
          MESSAGE="${MESSAGE}Please check the build logs for details."

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ vars.TELEGRAM_CHAT_ID }}" \
            -d "message_thread_id=${{ vars.TELEGRAM_TOPIC_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

  deploy:
    needs: [detect-changes, build-backend, build-frontend]
    if: always() && (needs.build-backend.result == 'success' || needs.build-frontend.result == 'success' || (needs.build-backend.result == 'skipped' && needs.build-frontend.result == 'skipped'))
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Send Final Build Summary
        run: |
          MESSAGE="üéâ *Build Process Summary*%0A%0A"
          MESSAGE="${MESSAGE}*Version:* ${{ needs.detect-changes.outputs.version }}%0A"
          MESSAGE="${MESSAGE}*Status:* Build and push completed%0A%0A"

          # Backend status
          if [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            if [ "${{ needs.build-backend.result }}" == "success" ]; then
              MESSAGE="${MESSAGE}‚úÖ *Backend:* Successfully built and pushed%0A"
              MESSAGE="${MESSAGE}   ‚îî‚îÄ ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.detect-changes.outputs.version }}-backend%0A"
            elif [ "${{ needs.build-backend.result }}" == "failure" ]; then
              MESSAGE="${MESSAGE}‚ùå *Backend:* Build failed%0A"
            fi
          else
            MESSAGE="${MESSAGE}‚è≠Ô∏è *Backend:* No changes detected, skipped%0A"
          fi

          # Frontend status
          if [ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]; then
            if [ "${{ needs.build-frontend.result }}" == "success" ]; then
              MESSAGE="${MESSAGE}‚úÖ *Frontend:* Successfully built and pushed%0A"
              MESSAGE="${MESSAGE}   ‚îî‚îÄ ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.detect-changes.outputs.version }}-frontend%0A"
            elif [ "${{ needs.build-frontend.result }}" == "failure" ]; then
              MESSAGE="${MESSAGE}‚ùå *Frontend:* Build failed%0A"
            fi
          else
            MESSAGE="${MESSAGE}‚è≠Ô∏è *Frontend:* No changes detected, skipped%0A"
          fi

          MESSAGE="${MESSAGE}%0A*Ready for manual deployment!* üöÄ"

          curl -s -X POST "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" \
            -d "chat_id=${{ vars.TELEGRAM_CHAT_ID }}" \
            -d "message_thread_id=${{ vars.TELEGRAM_TOPIC_ID }}" \
            -d "text=${MESSAGE}" \
            -d "parse_mode=Markdown"

      - name: Deploy notification
        run: |
          echo "Deployment started for version: ${{ needs.detect-changes.outputs.version }}"
          echo "Backend changed: ${{ needs.detect-changes.outputs.backend-changed }}"
          echo "Frontend changed: ${{ needs.detect-changes.outputs.frontend-changed }}"

          if [ "${{ needs.detect-changes.outputs.backend-changed }}" == "true" ]; then
            echo "‚úÖ Backend image built: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.detect-changes.outputs.version }}-backend"
          fi

          if [ "${{ needs.detect-changes.outputs.frontend-changed }}" == "true" ]; then
            echo "‚úÖ Frontend image built: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.detect-changes.outputs.version }}-frontend"
          fi

      # Add your actual deployment steps here
      # For example, deploy to your server using SSH, update Kubernetes manifests, etc.
      # - name: Deploy to production
      #   run: |
      #     # Your deployment commands here
